module Reaml =
  struct
    type undefined
    type vnode
    let undefined : undefined = Obj.magic ()
    let useState _ _ = Obj.magic ()
    let useReducer _ _ _ = Obj.magic ()
    let component _ _ = Obj.magic ()
    let recursiveComponent _ _ = Obj.magic ()
  end
type props = {
  foo: int }
external _foo : props -> Reaml.vnode = "foo"[@@reaml.component ][@@bs.val
                                                                  "foo"]
let _foo props = Reaml.Internal.createComponentElement _foo props
let _foo =
  Reaml.component "Foo"
    (fun () ->
       let (_count, _setCount) = Reaml.useState () Reaml.undefined in ())
let useThing _ (_ : Reaml.undefined) =
  let (count, _setCount) = Reaml.useState () Reaml.undefined in
  let () = Js.log "in useThing!" in
  let (value, _dispatch) = Reaml.useReducer () () Reaml.undefined in
  (count, value)
type foo = {
  foo: string }
let _foo =
  Reaml.recursiveComponent "Foo"
    (fun { foo = _ } ->
       fun foo ->
         let (_count, _setCount) = Reaml.useState () Reaml.undefined in
         let (_value, _dispatch) = Reaml.useReducer () () Reaml.undefined in
         let (_, _) = useThing () Reaml.undefined in foo { foo = "foo" })
let _foo =
  Reaml.component "Foo"
    (fun () ->
       let (_count, _setCount) = Reaml.useState () Reaml.undefined in
       let (_value, _dispatch) = Reaml.useReducer () () Reaml.undefined in
       let (_, _) = useThing () Reaml.undefined in ())
module Counter =
  struct
    type props = {
      initial: int }
    external make : props -> Reaml.vnode = "Counter"[@@bs.module
                                                      "./Interop.js"]
    [@@reaml.component ]
    let make props = Reaml.Internal.createComponentElement make props
  end
