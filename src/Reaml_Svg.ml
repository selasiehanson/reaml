let a = Reaml_Core.element "a"
let animate = Reaml_Core.element "animate"
let animateColor = Reaml_Core.element "animateColor"
let animateMotion = Reaml_Core.element "animateMotion"
let animateTransform = Reaml_Core.element "animateTransform"
let circle = Reaml_Core.element "circle"
let clipPath = Reaml_Core.element "clipPath"
let colorProfile = Reaml_Core.element "color-profile"
let cursor = Reaml_Core.element "cursor"
let defs = Reaml_Core.element "defs"
let desc = Reaml_Core.element "desc"
let discard = Reaml_Core.element "discard"
let ellipse = Reaml_Core.element "ellipse"
let feBlend = Reaml_Core.element "feBlend"
let feColorMatrix = Reaml_Core.element "feColorMatrix"
let feComponentTransfer = Reaml_Core.element "feComponentTransfer"
let feComposite = Reaml_Core.element "feComposite"
let feConvolveMatrix = Reaml_Core.element "feConvolveMatrix"
let feDiffuseLighting = Reaml_Core.element "feDiffuseLighting"
let feDisplacementMap = Reaml_Core.element "feDisplacementMap"
let feDistantLight = Reaml_Core.element "feDistantLight"
let feDropShadow = Reaml_Core.element "feDropShadow"
let feFlood = Reaml_Core.element "feFlood"
let feFuncA = Reaml_Core.element "feFuncA"
let feFuncB = Reaml_Core.element "feFuncB"
let feFuncG = Reaml_Core.element "feFuncG"
let feFuncR = Reaml_Core.element "feFuncR"
let feGaussianBlur = Reaml_Core.element "feGaussianBlur"
let feImage = Reaml_Core.element "feImage"
let feMerge = Reaml_Core.element "feMerge"
let feMergeNode = Reaml_Core.element "feMergeNode"
let feMorphology = Reaml_Core.element "feMorphology"
let feOffset = Reaml_Core.element "feOffset"
let fePointLight = Reaml_Core.element "fePointLight"
let feSpecularLighting = Reaml_Core.element "feSpecularLighting"
let feSpotLight = Reaml_Core.element "feSpotLight"
let feTile = Reaml_Core.element "feTile"
let feTurbulence = Reaml_Core.element "feTurbulence"
let filter = Reaml_Core.element "filter"
let font = Reaml_Core.element "font"
let fontFace = Reaml_Core.element "font-face"
let fontFaceFormat = Reaml_Core.element "font-face-format"
let fontFaceName = Reaml_Core.element "font-face-name"
let fontFaceSrc = Reaml_Core.element "font-face-src"
let fontFaceUri = Reaml_Core.element "font-face-uri"
let foreignObject = Reaml_Core.element "foreignObject"
let g = Reaml_Core.element "g"
let glyph = Reaml_Core.element "glyph"
let glyphRef = Reaml_Core.element "glyphRef"
let hatch = Reaml_Core.element "hatch"
let hatchpath = Reaml_Core.element "hatchpath"
let hkern = Reaml_Core.element "hkern"
let image = Reaml_Core.element "image"
let line = Reaml_Core.element "line"
let linearGradient = Reaml_Core.element "linearGradient"
let marker = Reaml_Core.element "marker"
let mask = Reaml_Core.element "mask"
let mesh = Reaml_Core.element "mesh"
let meshgradient = Reaml_Core.element "meshgradient"
let meshpatch = Reaml_Core.element "meshpatch"
let meshrow = Reaml_Core.element "meshrow"
let metadata = Reaml_Core.element "metadata"
let missingGlyph = Reaml_Core.element "missing-glyph"
let mpath = Reaml_Core.element "mpath"
let path = Reaml_Core.element "path"
let pattern = Reaml_Core.element "pattern"
let polygon = Reaml_Core.element "polygon"
let polyline = Reaml_Core.element "polyline"
let radialGradient = Reaml_Core.element "radialGradient"
let rect = Reaml_Core.element "rect"
let script = Reaml_Core.element "script"
let set = Reaml_Core.element "set"
let solidcolor = Reaml_Core.element "solidcolor"
let stop = Reaml_Core.element "stop"
let style_ = Reaml_Core.element "style"
let svg = Reaml_Core.element "svg"
let switch = Reaml_Core.element "switch"
let symbol = Reaml_Core.element "symbol"
let text = Reaml_Core.element "text"
let textPath = Reaml_Core.element "textPath"
let title = Reaml_Core.element "title"
let tref = Reaml_Core.element "tref"
let tspan = Reaml_Core.element "tspan"
let unknown = Reaml_Core.element "unknown"
let use = Reaml_Core.element "use"
let view = Reaml_Core.element "view"
let vkern = Reaml_Core.element "vkern"
let accentHeight (value : string) = Reaml_Core.property "accentHeight" value
let accumulate (value : string) = Reaml_Core.property "accumulate" value
let additive (value : string) = Reaml_Core.property "additive" value
let alignmentBaseline (value : string) = Reaml_Core.property "alignmentBaseline" value
let allowReorder (value : string) = Reaml_Core.property "allowReorder" value
let alphabetic (value : string) = Reaml_Core.property "alphabetic" value
let amplitude (value : string) = Reaml_Core.property "amplitude" value
let arabicForm (value : string) = Reaml_Core.property "arabicForm" value
let ascent (value : string) = Reaml_Core.property "ascent" value
let attributeName (value : string) = Reaml_Core.property "attributeName" value
let attributeType (value : string) = Reaml_Core.property "attributeType" value
let autoReverse (value : bool) = Reaml_Core.property "autoReverse" value
let azimuth (value : string) = Reaml_Core.property "azimuth" value
let baseFrequency (value : string) = Reaml_Core.property "baseFrequency" value
let baseProfile (value : string) = Reaml_Core.property "baseProfile" value
let baselineShift (value : string) = Reaml_Core.property "baselineShift" value
let bbox (value : string) = Reaml_Core.property "bbox" value
let begin_ (value : string) = Reaml_Core.property "begin" value
let bias (value : string) = Reaml_Core.property "bias" value
let by (value : string) = Reaml_Core.property "by" value
let calcMode (value : string) = Reaml_Core.property "calcMode" value
let capHeight (value : string) = Reaml_Core.property "capHeight" value
let clip (value : string) = Reaml_Core.property "clip" value
let clipPathUnits (value : string) = Reaml_Core.property "clipPathUnits" value
let clipPath_ (value : string) = Reaml_Core.property "clipPath" value
let clipRule (value : string) = Reaml_Core.property "clipRule" value
let color (value : string) = Reaml_Core.property "color" value
let colorInterpolation (value : string) = Reaml_Core.property "colorInterpolation" value

let colorInterpolationFilters (value : string) =
  Reaml_Core.property "colorInterpolationFilters" value

let colorProfile_ (value : string) = Reaml_Core.property "colorProfile" value
let colorRendering (value : string) = Reaml_Core.property "colorRendering" value
let contentScriptType (value : string) = Reaml_Core.property "contentScriptType" value
let contentStyleType (value : string) = Reaml_Core.property "contentStyleType" value
let crossOrigin (value : string) = Reaml_Core.property "crossOrigin" value
let cursor_ (value : string) = Reaml_Core.property "cursor" value
let cx (value : string) = Reaml_Core.property "cx" value
let cy (value : string) = Reaml_Core.property "cy" value
let d (value : string) = Reaml_Core.property "d" value
let decelerate (value : string) = Reaml_Core.property "decelerate" value
let descent (value : string) = Reaml_Core.property "descent" value
let diffuseConstant (value : string) = Reaml_Core.property "diffuseConstant" value
let direction (value : string) = Reaml_Core.property "direction" value
let display (value : string) = Reaml_Core.property "display" value
let divisor (value : string) = Reaml_Core.property "divisor" value
let dominantBaseline (value : string) = Reaml_Core.property "dominantBaseline" value
let dur (value : string) = Reaml_Core.property "dur" value
let dx (value : string) = Reaml_Core.property "dx" value
let dy (value : string) = Reaml_Core.property "dy" value
let edgeMode (value : string) = Reaml_Core.property "edgeMode" value
let elevation (value : string) = Reaml_Core.property "elevation" value
let enableBackground (value : string) = Reaml_Core.property "enableBackground" value
let end_ (value : string) = Reaml_Core.property "end" value
let exponent (value : string) = Reaml_Core.property "exponent" value

let externalResourcesRequired (value : bool) =
  Reaml_Core.property "externalResourcesRequired" value

let fill (value : string) = Reaml_Core.property "fill" value
let fillOpacity (value : string) = Reaml_Core.property "fillOpacity" value
let fillRule (value : string) = Reaml_Core.property "fillRule" value
let filterRes (value : string) = Reaml_Core.property "filterRes" value
let filterUnits (value : string) = Reaml_Core.property "filterUnits" value
let filter_ (value : string) = Reaml_Core.property "filter" value
let floodColor (value : string) = Reaml_Core.property "floodColor" value
let floodOpacity (value : string) = Reaml_Core.property "floodOpacity" value
let focusable (value : string) = Reaml_Core.property "focusable" value
let fontFamily (value : string) = Reaml_Core.property "fontFamily" value
let fontSize (value : string) = Reaml_Core.property "fontSize" value
let fontSizeAdjust (value : string) = Reaml_Core.property "fontSizeAdjust" value
let fontStretch (value : string) = Reaml_Core.property "fontStretch" value
let fontStyle (value : string) = Reaml_Core.property "fontStyle" value
let fontVariant (value : string) = Reaml_Core.property "fontVariant" value
let fontWeight (value : string) = Reaml_Core.property "fontWeight" value
let format (value : string) = Reaml_Core.property "format" value
let from (value : string) = Reaml_Core.property "from" value
let fx (value : string) = Reaml_Core.property "fx" value
let fy (value : string) = Reaml_Core.property "fy" value
let g1 (value : string) = Reaml_Core.property "g1" value
let g2 (value : string) = Reaml_Core.property "g2" value
let glyphName (value : string) = Reaml_Core.property "glyphName" value

let glyphOrientationHorizontal (value : string) =
  Reaml_Core.property "glyphOrientationHorizontal" value

let glyphOrientationVertical (value : string) =
  Reaml_Core.property "glyphOrientationVertical" value

let glyphRef_ (value : string) = Reaml_Core.property "glyphRef" value
let gradientTransform (value : string) = Reaml_Core.property "gradientTransform" value
let gradientUnits (value : string) = Reaml_Core.property "gradientUnits" value
let hanging (value : string) = Reaml_Core.property "hanging" value
let height (value : string) = Reaml_Core.property "height" value
let horizAdvX (value : string) = Reaml_Core.property "horizAdvX" value
let horizOriginX (value : string) = Reaml_Core.property "horizOriginX" value
let href (value : string) = Reaml_Core.property "href" value
let id (value : string) = Reaml_Core.property "id" value
let ideographic (value : string) = Reaml_Core.property "ideographic" value
let imageRendering (value : string) = Reaml_Core.property "imageRendering" value
let in2 (value : string) = Reaml_Core.property "in2" value
let in_ (value : string) = Reaml_Core.property "in" value
let intercept (value : string) = Reaml_Core.property "intercept" value
let k (value : string) = Reaml_Core.property "k" value
let k1 (value : string) = Reaml_Core.property "k1" value
let k2 (value : string) = Reaml_Core.property "k2" value
let k3 (value : string) = Reaml_Core.property "k3" value
let k4 (value : string) = Reaml_Core.property "k4" value
let kernelMatrix (value : string) = Reaml_Core.property "kernelMatrix" value
let kernelUnitLength (value : string) = Reaml_Core.property "kernelUnitLength" value
let kerning (value : string) = Reaml_Core.property "kerning" value
let keyPoints (value : string) = Reaml_Core.property "keyPoints" value
let keySplines (value : string) = Reaml_Core.property "keySplines" value
let keyTimes (value : string) = Reaml_Core.property "keyTimes" value
let lang (value : string) = Reaml_Core.property "lang" value
let lengthAdjust (value : string) = Reaml_Core.property "lengthAdjust" value
let letterSpacing (value : string) = Reaml_Core.property "letterSpacing" value
let lightingColor (value : string) = Reaml_Core.property "lightingColor" value
let limitingConeAngle (value : string) = Reaml_Core.property "limitingConeAngle" value
let local (value : string) = Reaml_Core.property "local" value
let markerEnd (value : string) = Reaml_Core.property "markerEnd" value
let markerHeight (value : string) = Reaml_Core.property "markerHeight" value
let markerMid (value : string) = Reaml_Core.property "markerMid" value
let markerStart (value : string) = Reaml_Core.property "markerStart" value
let markerUnits (value : string) = Reaml_Core.property "markerUnits" value
let markerWidth (value : string) = Reaml_Core.property "markerWidth" value
let maskContentUnits (value : string) = Reaml_Core.property "maskContentUnits" value
let maskUnits (value : string) = Reaml_Core.property "maskUnits" value
let mask_ (value : string) = Reaml_Core.property "mask" value
let mathematical (value : string) = Reaml_Core.property "mathematical" value
let max (value : string) = Reaml_Core.property "max" value
let media (value : string) = Reaml_Core.property "media" value
let method_ (value : string) = Reaml_Core.property "method" value
let min (value : string) = Reaml_Core.property "min" value
let mode (value : string) = Reaml_Core.property "mode" value
let name (value : string) = Reaml_Core.property "name" value
let numOctaves (value : string) = Reaml_Core.property "numOctaves" value
let offset (value : string) = Reaml_Core.property "offset" value
let opacity (value : string) = Reaml_Core.property "opacity" value
let operator (value : string) = Reaml_Core.property "operator" value
let order (value : string) = Reaml_Core.property "order" value
let orient (value : string) = Reaml_Core.property "orient" value
let orientation (value : string) = Reaml_Core.property "orientation" value
let origin (value : string) = Reaml_Core.property "origin" value
let overflow (value : string) = Reaml_Core.property "overflow" value
let overlinePosition (value : string) = Reaml_Core.property "overlinePosition" value
let overlineThickness (value : string) = Reaml_Core.property "overlineThickness" value
let paintOrder (value : string) = Reaml_Core.property "paintOrder" value
let panose1 (value : string) = Reaml_Core.property "panose1" value
let pathLength (value : string) = Reaml_Core.property "pathLength" value
let patternContentUnits (value : string) = Reaml_Core.property "patternContentUnits" value
let patternTransform (value : string) = Reaml_Core.property "patternTransform" value
let patternUnits (value : string) = Reaml_Core.property "patternUnits" value
let pointerEvents (value : string) = Reaml_Core.property "pointerEvents" value
let points (value : string) = Reaml_Core.property "points" value
let pointsAtX (value : string) = Reaml_Core.property "pointsAtX" value
let pointsAtY (value : string) = Reaml_Core.property "pointsAtY" value
let pointsAtZ (value : string) = Reaml_Core.property "pointsAtZ" value
let preserveAlpha (value : bool) = Reaml_Core.property "preserveAlpha" value
let preserveAspectRatio (value : string) = Reaml_Core.property "preserveAspectRatio" value
let primitiveUnits (value : string) = Reaml_Core.property "primitiveUnits" value
let r (value : string) = Reaml_Core.property "r" value
let radius (value : string) = Reaml_Core.property "radius" value
let refX (value : string) = Reaml_Core.property "refX" value
let refY (value : string) = Reaml_Core.property "refY" value
let renderingIntent (value : string) = Reaml_Core.property "renderingIntent" value
let repeatCount (value : string) = Reaml_Core.property "repeatCount" value
let repeatDur (value : string) = Reaml_Core.property "repeatDur" value
let requiredExtensions (value : string) = Reaml_Core.property "requiredExtensions" value
let requiredFeatures (value : string) = Reaml_Core.property "requiredFeatures" value
let restart (value : string) = Reaml_Core.property "restart" value
let result (value : string) = Reaml_Core.property "result" value
let role (value : string) = Reaml_Core.property "role" value
let rotate (value : string) = Reaml_Core.property "rotate" value
let rx (value : string) = Reaml_Core.property "rx" value
let ry (value : string) = Reaml_Core.property "ry" value
let scale (value : string) = Reaml_Core.property "scale" value
let seed (value : string) = Reaml_Core.property "seed" value
let shapeRendering (value : string) = Reaml_Core.property "shapeRendering" value
let slope (value : string) = Reaml_Core.property "slope" value
let spacing (value : string) = Reaml_Core.property "spacing" value
let specularConstant (value : string) = Reaml_Core.property "specularConstant" value
let specularExponent (value : string) = Reaml_Core.property "specularExponent" value
let speed (value : string) = Reaml_Core.property "speed" value
let spreadMethod (value : string) = Reaml_Core.property "spreadMethod" value
let startOffset (value : string) = Reaml_Core.property "startOffset" value
let stdDeviation (value : string) = Reaml_Core.property "stdDeviation" value
let stemh (value : string) = Reaml_Core.property "stemh" value
let stemv (value : string) = Reaml_Core.property "stemv" value
let stitchTiles (value : string) = Reaml_Core.property "stitchTiles" value
let stopColor (value : string) = Reaml_Core.property "stopColor" value
let stopOpacity (value : string) = Reaml_Core.property "stopOpacity" value

let strikethroughPosition (value : string) =
  Reaml_Core.property "strikethroughPosition" value

let strikethroughThickness (value : string) =
  Reaml_Core.property "strikethroughThickness" value

let string (value : string) = Reaml_Core.property "string" value
let stroke (value : string) = Reaml_Core.property "stroke" value
let strokeDasharray (value : string) = Reaml_Core.property "strokeDasharray" value
let strokeDashoffset (value : string) = Reaml_Core.property "strokeDashoffset" value
let strokeLinecap (value : string) = Reaml_Core.property "strokeLinecap" value
let strokeLinejoin (value : string) = Reaml_Core.property "strokeLinejoin" value
let strokeMiterlimit (value : string) = Reaml_Core.property "strokeMiterlimit" value
let strokeOpacity (value : string) = Reaml_Core.property "strokeOpacity" value
let strokeWidth (value : string) = Reaml_Core.property "strokeWidth" value
let surfaceScale (value : string) = Reaml_Core.property "surfaceScale" value
let systemLanguage (value : string) = Reaml_Core.property "systemLanguage" value
let tabIndex (value : int) = Reaml_Core.property "tabIndex" value
let tableValues (value : string) = Reaml_Core.property "tableValues" value
let target (value : string) = Reaml_Core.property "target" value
let targetX (value : string) = Reaml_Core.property "targetX" value
let targetY (value : string) = Reaml_Core.property "targetY" value
let textAnchor (value : string) = Reaml_Core.property "textAnchor" value
let textDecoration (value : string) = Reaml_Core.property "textDecoration" value
let textLength (value : string) = Reaml_Core.property "textLength" value
let textRendering (value : string) = Reaml_Core.property "textRendering" value
let to_ (value : string) = Reaml_Core.property "to" value
let transform (value : string) = Reaml_Core.property "transform" value
let type_ (value : string) = Reaml_Core.property "type" value
let u1 (value : string) = Reaml_Core.property "u1" value
let u2 (value : string) = Reaml_Core.property "u2" value
let underlinePosition (value : string) = Reaml_Core.property "underlinePosition" value
let underlineThickness (value : string) = Reaml_Core.property "underlineThickness" value
let unicode (value : string) = Reaml_Core.property "unicode" value
let unicodeBidi (value : string) = Reaml_Core.property "unicodeBidi" value
let unicodeRange (value : string) = Reaml_Core.property "unicodeRange" value
let unitsPerEm (value : string) = Reaml_Core.property "unitsPerEm" value
let vAlphabetic (value : string) = Reaml_Core.property "vAlphabetic" value
let vHanging (value : string) = Reaml_Core.property "vHanging" value
let vIdeographic (value : string) = Reaml_Core.property "vIdeographic" value
let vMathematical (value : string) = Reaml_Core.property "vMathematical" value
let values (value : string) = Reaml_Core.property "values" value
let vectorEffect (value : string) = Reaml_Core.property "vectorEffect" value
let version (value : string) = Reaml_Core.property "version" value
let vertAdvY (value : string) = Reaml_Core.property "vertAdvY" value
let vertOriginX (value : string) = Reaml_Core.property "vertOriginX" value
let vertOriginY (value : string) = Reaml_Core.property "vertOriginY" value
let viewBox (value : string) = Reaml_Core.property "viewBox" value
let viewTarget (value : string) = Reaml_Core.property "viewTarget" value
let visibility (value : string) = Reaml_Core.property "visibility" value
let width (value : string) = Reaml_Core.property "width" value
let widths (value : string) = Reaml_Core.property "widths" value
let wordSpacing (value : string) = Reaml_Core.property "wordSpacing" value
let writingMode (value : string) = Reaml_Core.property "writingMode" value
let x (value : string) = Reaml_Core.property "x" value
let x1 (value : string) = Reaml_Core.property "x1" value
let x2 (value : string) = Reaml_Core.property "x2" value
let xChannelSelector (value : string) = Reaml_Core.property "xChannelSelector" value
let xHeight (value : string) = Reaml_Core.property "xHeight" value
let xlinkActuate (value : string) = Reaml_Core.property "xlinkActuate" value
let xlinkArcrole (value : string) = Reaml_Core.property "xlinkArcrole" value
let xlinkHref (value : string) = Reaml_Core.property "xlinkHref" value
let xlinkRole (value : string) = Reaml_Core.property "xlinkRole" value
let xlinkShow (value : string) = Reaml_Core.property "xlinkShow" value
let xlinkTitle (value : string) = Reaml_Core.property "xlinkTitle" value
let xlinkType (value : string) = Reaml_Core.property "xlinkType" value
let xmlBase (value : string) = Reaml_Core.property "xmlBase" value
let xmlLang (value : string) = Reaml_Core.property "xmlLang" value
let xmlSpace (value : string) = Reaml_Core.property "xmlSpace" value
let xmlns (value : string) = Reaml_Core.property "xmlns" value
let xmlnsXlink (value : string) = Reaml_Core.property "xmlnsXlink" value
let y (value : string) = Reaml_Core.property "y" value
let y1 (value : string) = Reaml_Core.property "y1" value
let y2 (value : string) = Reaml_Core.property "y2" value
let yChannelSelector (value : string) = Reaml_Core.property "yChannelSelector" value
let z (value : string) = Reaml_Core.property "z" value
let zoomAndPan (value : string) = Reaml_Core.property "zoomAndPan" value
